from build.pythermo.pythermo import IdealGas
g = IdealGas(287, 1004)

import numpy as np

N = int(1e6)
t1 = np.repeat(273., N)
t2 = np.repeat(500., N)
p1 = np.repeat(101325., N)
p2 = np.repeat(5e5, N)
eff = np.repeat(0.8, N)
res = np.ones_like(t1)

print("Benchmark pythermo")
%timeit res = g.phi(t1)
%timeit res = g.pr(t1, t2, 0.8)
%timeit res = g.eff_poly(p1, t1, p2, t2)


class NumpyIdealGas:

    def __init__(self, r: float, cp: float):
        self._r = r
        self._cp = cp
        self._gamma = cp / (cp - r)

    def r(self, t):
        return np.full_like(t, self._r)

    def cp(self, t):
        return np.full_like(t, self._cp)

    def h(self, t):
        return self._cp * t
    
    def gamma(self, t):
        return np.full_like(t, self._gamma)

    def phi(self, t):
        return self._cp * np.log(t)

    def pr(self, t1, t2, eff_poly):
        return np.exp(np.log(t2 / t1) * eff_poly * self._cp / self._r)

    def eff_poly(self, p1, t1, p2, t2):
        return self._r * np.log(p2 / p1) / (self.phi(t2) - self.phi(t1))

    def t_from_h(self, h):
        return h / self._cp


gpy = NumpyIdealGas(287, 1004)

print("Benchmark pure NumPy")
%timeit res = gpy.cp(t1)
%timeit res = gpy.gamma(t1)
%timeit res = gpy.r(t1)
%timeit res = gpy.h(t1)
%timeit res = gpy.phi(t1)
%timeit res = gpy.pr(t1, t2, 0.8)
%timeit res = gpy.eff_poly(p1, t1, p2, t2)
